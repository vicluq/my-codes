#include <stdio.h>
#include <stdlib.h>


int main () {

int hora;
int *ponteiro;
ponteiro = &hora; // o ponteiro sem o * com o & aponta para o endereço de 'hora' e embaixo ele atribui o valor de 'minutos' a esse endereço pois está com *, então --> x=80, y=80

int minutos = 80;
*ponteiro = minutos; //Se eu por o & em 'minutos', a variável 'hora' assumirá o valor do endereço de memoria de minutos!



printf("%i\n", hora); //Com o asteristico ele acessa o valor da variável e sem, ele acessa o endereço da memória
printf("%i", minutos);


return 0;

}

SEGUNDA EXPLICAÇÃO:

#include <stdio.h>
#include <stdlib.h>


int main () {

int x = 10;

int *pontX;
pontX = &x; //abro o endereço de memória de X - se eu não abrir o endereço de memória, eu não poderia usar x no printf se quisse ver 20, pois eu não aloquei 20 ao endereço de X
*pontX = 20; //aqui eu digo que o valor do ponteiro vai ser x = 10. Se eu por outro valor, o valor de X mudará, pois eu transferi esse valor ao endereço de memória qnd acessei em cima! 

printf("O valor de X eh: %i e seu endereco eh: %i", x, pontX); 

int *pontTeste;
pontTeste = 6422292; // OBS: pode-se tbm por ao invés de &x, o numero do endereço
printf("\n%i", *pontTeste); // como eu alterei o valor de X no seu endereço, o valor aparece 20



return 0;

}

